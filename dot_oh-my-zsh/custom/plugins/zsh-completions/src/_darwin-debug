#compdef darwin-debug

# -----------------------------------------------------------------------------
# The BSD-3-Clause License
#
# Copyright (c) 2016, Koichi Shiraishi
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
# * Neither the name of que nor the names of its
#   contributors may be used to endorse or promote products derived from
#   this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
# -----------------------------------------------------------------------------
#
# NAME
#     darwin-debug -- posix spawn a process that is stopped at the entry point
#                     for debugging.
#
# SYNOPSIS
#     darwin-debug --unix-socket=<SOCKET> [--arch=<ARCH>] [--working-dir=<PATH>] [--disable-aslr] [--no-env] [--setsid] [--help] -- <PROGRAM> [<PROGRAM-ARG> <PROGRAM-ARG> ....]
#
# DESCRIPTION
#     darwin-debug will exec itself into a child process <PROGRAM> that is
#     halted for debugging. It does this by using posix_spawn() along with
#     darwin specific posix_spawn flags that allows exec only (no fork), and
#     stop at the program entry point. Any program arguments <PROGRAM-ARG> are
#     passed on to the exec as the arguments for the new process. The current
#     environment will be passed to the new process unless the "--no-env"
#     option is used. A unix socket must be supplied using the
#     --unix-socket=<SOCKET> option so the calling program can handshake with
#     this process and get its process id.
#
# EXAMPLE
#    darwin-debug --arch=i386 -- /bin/ls -al /tmp
#
# -----------------------------------------------------------------------------

function _darwin-debug() {
  local context curcontext=$curcontext state line ret=1
  declare -A opt_args

  _arguments -C \
    '--unix-socket=[socket]:SOCKET:_socket' \
    '--arch=[arch]:ARCH:(i386 x86_64)' \
    '--working-dir=[wording directory]:PATH:_directories' \
    '--disable-aslr[disable aslr]' \
    '--no-env[no set environment variable]' \
    '--setsid[set sid]' \
    '--help[show help]' \
    && ret=0
    # TODO(zchee): support PROGRAM arguments
    # -- <PROGRAM> [<PROGRAM-ARG> <PROGRAM-ARG> ....] 
    # '*:: :->args' \

  # case $state in
  #   (args)
  #     case $words[1] in
  #       subcommand1)
  #         _arguments \
  #           '-foo[subcommand2 -foo argument comment]'
  #           '*:file:_files'
  #         ;;
  #       subcommand2)
  #         _arguments \
  #           '-bar[subcommand2 -bar argument comment]' \
  #           '-baz[subcommand2 -baz argument comment]'
  #           '*:devices:_devices'
  #         ;;
  #     esac
  #     ;;
  # esac

  return ret
}

_darwin-debug "$*"

# vim:ft=zsh:et:sts=2:sw=2
