#compdef hidutil

# -----------------------------------------------------------------------------
# The BSD-3-Clause License
#
# Copyright (c) 2016, Koichi Shiraishi
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
# * Neither the name of que nor the names of its
#   contributors may be used to endorse or promote products derived from
#   this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
# -----------------------------------------------------------------------------

function _hidutil() {
  local context curcontext=$curcontext state line ret=1
  declare -A opt_args

  local -a commands

  commands=(
  'dump:Dump HID Event System state'
  'property:Read/Write HID Event System property'
  'list:List HID Event System services'
  )

  _arguments -C \
    "1: :{_describe 'hidutil command' commands}" \
    '*:: :->args' \
    && ret=0

  case $state in
    (args)
      case $words[1] in
        dump)
          local -a object
          object=(
          'system:HID Event System'
          'clients:HID Event System Clients'
          'services:HID Event System services'
          )
          _arguments \
            {-f,--format}'[Format type]:(xml text)' \
            {-o,--output}'[Output file (or stdout if not specified)]' \
            "1: :{_describe 'dump object' object}" \
            && return
          ;;
        property)
          _arguments \
            '--filter[Filter services by properties (key/value pair JSON style dictionary)]: :->filter' \
            '--get[Get property with key (where key is string value)]:key' \
            '--set[Set property (key/value pair JSON style dictionary)]:dictionary' \
            && return
            case $state in
              (filter)
                local -a dictionary
                dictionary=(
                'ProductID:numeric value (decimal or hex)'
                'VendorID:numeric value (decimal or hex)'
                'LocationID:numeric value (decimal or hex)'
                'PrimaryUsagePage:numeric value (decimal or hex)'
                'PrimaryUsage:numeric value (decimal or hex)'
                'Trasport:string value'
                'Product:string value'
                )
                _arguments "*: :{_describe 'dictionary' filter_dictionary}"
                ;;
            esac
          ;;
        list)
          _arguments \
            '--filter[Filter services by properties (key/value pair JSON style dictionary)]: :->filter' \
            && return
          case $state in
            filter)
              local -a dictionary
              dictionary=(
              'ProductID:numeric value (decimal or hex)'
              'VendorID:numeric value (decimal or hex)'
              'LocationID:numeric value (decimal or hex)'
              'PrimaryUsagePage:numeric value (decimal or hex)'
              'PrimaryUsage:numeric value (decimal or hex)'
              'Trasport:string value'
              'Product:string value'
              )
              _arguments "*: :{_describe 'dictionary' dictionary}"
              ;;
          esac
          ;;
      esac
      ;;
  esac

  return ret
}

_hidutil "$@"

# vim:ft=zsh:et:sts=2:sw=2
