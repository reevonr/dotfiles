gradle_subprojects=( ${(Q)"${(z)$(<<\EO:gradle_subprojects

EO:gradle_subprojects
)}"} )
gradle_tasks=( ${(Q)"${(z)$(<<\EO:gradle_tasks
'processTestResourcesResources:Processes test resources resources.' 'help:Displays a help message.' 'buildNeeded:Assembles and tests this project and all projects it depends on.' 'inspectRuntimeClasspath:Performs sanity checks of the runtime classpath to warn about misconfigured builds' 'compileTestResourcesJava:Compiles test resources Java source.' 'check:Runs all checks.' 'knows:Do you know who knows?' 'internalStartTestResourcesService:Starts the test resources server' 'clean:Deletes the build directory.' 'startShadowScripts:Creates OS specific scripts to run the project as a JVM application using the shadow jar' 'compileTestResourcesKotlin:Compiles the compilation '\''testResources'\'' in target '\'''\''.' 'run:Runs this project as a JVM application' 'testNativeImage:Runs tests against a native image build of the server. Requires the server to allow the port to configurable with '\''micronaut.server.port'\''.' 'stopTestResourcesService:Stops the test resources server' 'tasks:Displays the tasks runnable from root project '\''nano-scoring-service'\''.' 'javaToolchains:Displays the detected java toolchains.' 'assembleShadowDist:Assembles the shadow distributions' 'assemble:Assembles the outputs of this project.' 'kaptGenerateStubsKotlin:' 'generateTestResourcesConfigFile:Generates a GraalVM resource-config.json file' 'testResourcesClasses:Assembles test resources classes.' 'compileTestKotlin:Compiles the compilation '\''test'\'' in target '\'''\''.' 'kotlinSourcesJar:Assembles a jar archive containing the sources of target '\''kotlin'\''.' 'buildLayers:Builds application layers for use in a Docker container (main image)' 'init:Initializes a new Gradle build.' 'cleanEclipseFactorypath:' 'eclipseFactorypath:Generates the Eclipse factorypath file.' 'test:Runs the test suite.' 'kaptTestKotlin:' 'eclipse:Generates all Eclipse files.' 'jar:Assembles a jar archive containing the main classes.' 'compileKotlin:Compiles the compilation '\''main'\'' in target '\'''\''.' 'nativeTest:Executes the test native binary' 'nativeTestCompileClasspathJar:Builds a pathing jar for the test native binary' 'startTestResourcesService:Starts the test resources server in standalone mode' 'dockerPrepareContext:' 'processTestResources:Processes test resources.' 'buildNativeLayersTask:Builds application layers for use in a Docker container (main image)' 'kaptTestResourcesKotlin:' 'kaptGenerateStubsTestResourcesKotlin:' 'shadowDistZip:Bundles the project as a distribution.' 'cleanEclipseProject:' 'runShadow:Runs this project as a JVM application using the shadow jar' 'model:Displays the configuration model of root project '\''nano-scoring-service'\''. [deprecated]' 'shadowDistTar:Bundles the project as a distribution.' 'startScripts:Creates OS specific scripts to run the project as a JVM application.' 'projects:Displays the sub-projects of root project '\''nano-scoring-service'\''.' 'buildKotlinToolingMetadata:Build metadata json file containing information about the used Kotlin tooling' 'classes:Assembles main classes.' 'runnerJar:' 'nativeBuild:' 'compileJava:Compiles main Java source.' 'dockerBuildNative:Builds a Native Docker Image using GraalVM (image main)' 'kaptKotlin:' 'buildEnvironment:Displays all buildscript dependencies declared in root project '\''nano-scoring-service'\''.' 'distZip:Bundles the project as a distribution.' 'nativeCompileClasspathJar:Builds a pathing jar for the main native binary' 'outgoingVariants:Displays the outgoing variants of root project '\''nano-scoring-service'\''.' 'build:Assembles and tests this project.' 'nativeTestCompile:Compiles a native image for the test binary' 'wrapper:Generates Gradle wrapper files.' 'shadowJar:Create a combined JAR of project and runtime dependencies' 'distTar:Bundles the project as a distribution.' 'generateResourcesConfigFile:Generates a GraalVM resource-config.json file' 'dockerPush:Pushes the main Docker Image' 'properties:Displays the properties of root project '\''nano-scoring-service'\''.' 'dependencyInsight:Displays the insight into a specific dependency in root project '\''nano-scoring-service'\''.' 'prepareKotlinBuildScriptModel:' 'testClasses:Assembles test classes.' 'cleanEclipse:Cleans all Eclipse files.' 'javadoc:Generates Javadoc API documentation for the main source code.' 'collectReachabilityMetadata:Obtains native reachability metdata for the runtime classpath configuration' 'dockerfile:Builds a Docker File for image main' 'metadataCopy:Copies metadata collected from tasks instrumented with the agent into target directories.' 'assembleDist:Assembles the main distributions' 'buildDependents:Assembles and tests this project and all projects that depend on it.' 'compileTestJava:Compiles test Java source.' 'dockerPushNative:Pushes a Native Docker Image using GraalVM (image main)' 'dockerBuild:Builds a Docker Image (image main)' 'nativeCompile:Compiles a native image for the main binary' 'nativeRun:Executes the main native binary' 'components:Displays the components produced by root project '\''nano-scoring-service'\''. [deprecated]' 'resolvableConfigurations:Displays the configurations that can be resolved in root project '\''nano-scoring-service'\''.' 'cleanEclipseClasspath:' 'dockerfileNative:Builds a Native Docker File for image main' 'installDist:Installs the project as a distribution as-is.' 'eclipseProject:Generates the Eclipse project file.' 'eclipseClasspath:Generates the Eclipse classpath file.' 'kaptGenerateStubsTestKotlin:' 'installShadowDist:Installs the project as a distribution as-is.' 'processResources:Processes main resources.' 'cleanEclipseJdt:' 'cleanEclipseJdtApt:' 'eclipseJdtApt:Generates the Eclipse JDT APT settings file.' 'dependentComponents:Displays the dependent components of components in root project '\''nano-scoring-service'\''. [deprecated]' 'nativeTestBuild:' 'mainClasses:' 'eclipseJdt:Generates the Eclipse JDT settings file.' 'dependencies:Displays all dependencies declared in root project '\''nano-scoring-service'\''.'
EO:gradle_tasks
)}"} )
